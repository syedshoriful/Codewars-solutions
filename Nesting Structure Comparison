Complete the function/method (depending on the language) to return true/True when its argument is an array that has the same nesting structures and same corresponding length of nested arrays as the first array.

For example:

# should return True
same_structure_as([ 1, 1, 1 ], [ 2, 2, 2 ] )
same_structure_as([ 1, [ 1, 1 ] ], [ 2, [ 2, 2 ] ] )

# should return False 
same_structure_as([ 1, [ 1, 1 ] ], [ [ 2, 2 ], 2 ] )
same_structure_as([ 1, [ 1, 1 ] ], [ [ 2 ], 2 ] )

# should return True
same_structure_as([ [ [ ], [ ] ] ], [ [ [ ], [ ] ] ] )

# should return False
same_structure_as([ [ [ ], [ ] ] ], [ [ 1, 1 ] ] 

#My solution:
def same_structure_as(original, other):
    if original == other:
        return True
    elif type(original) != type(other):
        return False
    elif type(original) !=int  and type(other) != int:
        if len(original) == len(other):
            for value in range(0,len(original)):
                if type(original[value])==str:
                        return True
                    
                
            for value in range(0, len(original)):
                if type(original[value]) == type(other[value])==list:
                    if len(original[value])==len(other[value]):
                        if type(original[value][0])== type(other[value][0])==list:
                            
                            if type(original[value][0])!= type(other[value][0]):
                               return False                       
                        elif type(original[value][0])!= type(other[value][0]):
                            return False
                        
                        
                    elif len(original[value])!=len(other[value]):
                        return False
                elif type(original[value]) != type(other[value]):
                     return False
            else:
                return True
        else:

            return False
    #Modified solution which was presented:
    def same_structure_as(original, other):
       if type(original) != type(other) or len(original) != len(other):
           return False
    
       for value in range(0,len(original)):
                if type(original[value])==str:
                        return True
       for org_val, other_val in zip(original, other):
           if type(org_val)==str:
                        return True
            
           if type(org_val) != type(other_val):
               return False
           if type(org_val) is list and type(other_val) is list:
               if not same_structure_as(org_val, other_val):
                   return False
            
       return True
